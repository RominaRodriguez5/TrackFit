/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package mosqueira.trackfit.views;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import mosqueira.trackfit.Main;
import mosqueira.trackfit.dataAccess.DataAccess;
import mosqueira.trackfit.dto.Exercicis;
import mosqueira.trackfit.dto.ExercicisWorKouts;
import mosqueira.trackfit.dto.Usuaris;
import mosqueira.trackfit.dto.Workouts;

/**
 *
 * @author Lulas
 */
public class ListPanelUsuariosAsignados extends javax.swing.JPanel {

    private Main jFrameMain;
    private Usuaris instructor;
    private Usuaris usuarioSeleccionado; 
    private DataAccess da = new DataAccess(); 
    private ArrayList<Workouts> listWorkouts; 
    private ArrayList<Usuaris> listUsers;

    /**
     * Creates new form ListPanel
     */
    public ListPanelUsuariosAsignados(Main jFrameMain, Usuaris instructor) {
        initComponents();
        this.instructor = instructor;
        this.jFrameMain = jFrameMain;
        assignedUsers();
        inicializarTablaWorkouts();
        inicializarTablaListaExercicis();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialogWorkouts = new javax.swing.JDialog();
        jLabelDate = new javax.swing.JLabel();
        jComboBoxUsersWork = new javax.swing.JComboBox<>();
        jTextComment = new javax.swing.JTextField();
        jSpinnerForDate = new javax.swing.JSpinner();
        jButtonAddWorkout = new javax.swing.JButton();
        jButtonCancelarWorkouts = new javax.swing.JButton();
        jDesktopVisualWorkout = new javax.swing.JDesktopPane();
        jLabel4 = new javax.swing.JLabel();
        jListUsers = new javax.swing.JLabel();
        jDialogExercicis = new javax.swing.JDialog();
        jNombreExercicis = new javax.swing.JLabel();
        jDescripcioExercicis = new javax.swing.JLabel();
        jTextNombreExercici = new javax.swing.JTextField();
        jButtonGuardarExercicis = new javax.swing.JButton();
        jButtonCancelExercici = new javax.swing.JButton();
        jTextDescripcio = new javax.swing.JTextField();
        jDesktopVisualExercicis = new javax.swing.JDesktopPane();
        jDialogModificar = new javax.swing.JDialog();
        jNomExerciciModificar = new javax.swing.JLabel();
        jDescripcioExercicisModificar = new javax.swing.JLabel();
        jTextNomExerciciModificar = new javax.swing.JTextField();
        jButtonAddModificado = new javax.swing.JButton();
        jButtonCancelModificacion = new javax.swing.JButton();
        jTextDescripcioModificar = new javax.swing.JTextField();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jLogo = new javax.swing.JLabel();
        jButtonAddWorkouts = new javax.swing.JButton();
        jButtonAddExerciseToWorkouts = new javax.swing.JButton();
        jPanelAssignedExercicis = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListExercise = new javax.swing.JList<>();
        jPanelListUsers = new javax.swing.JPanel();
        jComboBoxListUsers = new javax.swing.JComboBox<>();
        jPanelWorkoutsTable = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableWorkouts = new javax.swing.JTable();
        jPanelExercicis = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableExercicis = new javax.swing.JTable();
        jButtonShowExercise = new javax.swing.JButton();
        jButtonAgregar = new javax.swing.JButton();
        jButtonModificar = new javax.swing.JButton();
        jButtonEliminar = new javax.swing.JButton();

        jDialogWorkouts.setBackground(new java.awt.Color(204, 204, 204));
        jDialogWorkouts.setMinimumSize(new java.awt.Dimension(400, 400));
        jDialogWorkouts.getContentPane().setLayout(null);

        jLabelDate.setBackground(new java.awt.Color(255, 255, 153));
        jLabelDate.setFont(new java.awt.Font("SansSerif", 2, 12)); // NOI18N
        jLabelDate.setText("For Date");
        jDialogWorkouts.getContentPane().add(jLabelDate);
        jLabelDate.setBounds(50, 30, 90, 30);

        jComboBoxUsersWork.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxUsersWork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxUsersWorkActionPerformed(evt);
            }
        });
        jDialogWorkouts.getContentPane().add(jComboBoxUsersWork);
        jComboBoxUsersWork.setBounds(180, 100, 180, 30);
        jDialogWorkouts.getContentPane().add(jTextComment);
        jTextComment.setBounds(180, 160, 180, 30);

        jSpinnerForDate.setModel(new javax.swing.SpinnerDateModel());
        jDialogWorkouts.getContentPane().add(jSpinnerForDate);
        jSpinnerForDate.setBounds(180, 30, 180, 30);

        jButtonAddWorkout.setText("Add");
        jButtonAddWorkout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddWorkoutActionPerformed(evt);
            }
        });
        jDialogWorkouts.getContentPane().add(jButtonAddWorkout);
        jButtonAddWorkout.setBounds(70, 210, 100, 23);

        jButtonCancelarWorkouts.setText("Cancel");
        jButtonCancelarWorkouts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarWorkoutsActionPerformed(evt);
            }
        });
        jDialogWorkouts.getContentPane().add(jButtonCancelarWorkouts);
        jButtonCancelarWorkouts.setBounds(210, 210, 90, 23);

        jDesktopVisualWorkout.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel4.setText("Comment");
        jDesktopVisualWorkout.add(jLabel4);
        jLabel4.setBounds(40, 170, 80, 20);

        jListUsers.setFont(new java.awt.Font("SansSerif", 2, 12)); // NOI18N
        jListUsers.setText(" Users List");
        jDesktopVisualWorkout.add(jListUsers);
        jListUsers.setBounds(40, 100, 110, 30);

        jDialogWorkouts.getContentPane().add(jDesktopVisualWorkout);
        jDesktopVisualWorkout.setBounds(0, 0, 520, 390);

        jDialogExercicis.setMinimumSize(new java.awt.Dimension(400, 400));
        jDialogExercicis.getContentPane().setLayout(null);

        jNombreExercicis.setBackground(new java.awt.Color(255, 255, 153));
        jNombreExercicis.setFont(new java.awt.Font("SansSerif", 2, 12)); // NOI18N
        jNombreExercicis.setText("Name Exercicis");
        jDialogExercicis.getContentPane().add(jNombreExercicis);
        jNombreExercicis.setBounds(30, 30, 100, 30);

        jDescripcioExercicis.setFont(new java.awt.Font("SansSerif", 2, 12)); // NOI18N
        jDescripcioExercicis.setText("Description");
        jDialogExercicis.getContentPane().add(jDescripcioExercicis);
        jDescripcioExercicis.setBounds(30, 100, 110, 30);
        jDialogExercicis.getContentPane().add(jTextNombreExercici);
        jTextNombreExercici.setBounds(150, 30, 180, 30);

        jButtonGuardarExercicis.setText("Add");
        jButtonGuardarExercicis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarExercicisActionPerformed(evt);
            }
        });
        jDialogExercicis.getContentPane().add(jButtonGuardarExercicis);
        jButtonGuardarExercicis.setBounds(70, 160, 100, 23);

        jButtonCancelExercici.setText("Cancel");
        jButtonCancelExercici.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelExerciciActionPerformed(evt);
            }
        });
        jDialogExercicis.getContentPane().add(jButtonCancelExercici);
        jButtonCancelExercici.setBounds(230, 160, 90, 23);
        jDialogExercicis.getContentPane().add(jTextDescripcio);
        jTextDescripcio.setBounds(150, 100, 180, 30);
        jDialogExercicis.getContentPane().add(jDesktopVisualExercicis);
        jDesktopVisualExercicis.setBounds(0, -1, 400, 300);

        jDialogModificar.setMinimumSize(new java.awt.Dimension(400, 400));
        jDialogModificar.getContentPane().setLayout(null);

        jNomExerciciModificar.setBackground(new java.awt.Color(255, 255, 153));
        jNomExerciciModificar.setFont(new java.awt.Font("SansSerif", 2, 12)); // NOI18N
        jNomExerciciModificar.setText("Name Exercicis");
        jDialogModificar.getContentPane().add(jNomExerciciModificar);
        jNomExerciciModificar.setBounds(30, 30, 100, 30);

        jDescripcioExercicisModificar.setFont(new java.awt.Font("SansSerif", 2, 12)); // NOI18N
        jDescripcioExercicisModificar.setText("Descripcio");
        jDialogModificar.getContentPane().add(jDescripcioExercicisModificar);
        jDescripcioExercicisModificar.setBounds(30, 100, 110, 30);

        jTextNomExerciciModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextNomExerciciModificarActionPerformed(evt);
            }
        });
        jDialogModificar.getContentPane().add(jTextNomExerciciModificar);
        jTextNomExerciciModificar.setBounds(150, 30, 180, 30);

        jButtonAddModificado.setForeground(java.awt.SystemColor.menu);
        jButtonAddModificado.setText("Add");
        jButtonAddModificado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddModificadoActionPerformed(evt);
            }
        });
        jDialogModificar.getContentPane().add(jButtonAddModificado);
        jButtonAddModificado.setBounds(70, 160, 100, 23);

        jButtonCancelModificacion.setText("Cancel");
        jButtonCancelModificacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelModificacionActionPerformed(evt);
            }
        });
        jDialogModificar.getContentPane().add(jButtonCancelModificacion);
        jButtonCancelModificacion.setBounds(230, 160, 90, 23);

        jTextDescripcioModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextDescripcioModificarActionPerformed(evt);
            }
        });
        jDialogModificar.getContentPane().add(jTextDescripcioModificar);
        jTextDescripcioModificar.setBounds(150, 100, 180, 30);
        jDialogModificar.getContentPane().add(jDesktopPane1);
        jDesktopPane1.setBounds(0, 0, 400, 300);

        setBackground(new java.awt.Color(255, 255, 204));
        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setForeground(new java.awt.Color(249, 249, 231));
        setMinimumSize(new java.awt.Dimension(700, 600));
        setPreferredSize(new java.awt.Dimension(700, 600));
        setRequestFocusEnabled(false);
        setLayout(null);

        jLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logo.png"))); // NOI18N
        jLogo.setText("jLabel2");
        jLogo.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 153, 51)));
        jLogo.setPreferredSize(new java.awt.Dimension(150, 150));
        jLogo.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        add(jLogo);
        jLogo.setBounds(390, 10, 230, 60);

        jButtonAddWorkouts.setBackground(new java.awt.Color(204, 204, 204));
        jButtonAddWorkouts.setForeground(new java.awt.Color(0, 0, 0));
        jButtonAddWorkouts.setText("Add New Workouts");
        jButtonAddWorkouts.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonAddWorkouts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddWorkoutsActionPerformed(evt);
            }
        });
        add(jButtonAddWorkouts);
        jButtonAddWorkouts.setBounds(10, 100, 120, 30);

        jButtonAddExerciseToWorkouts.setBackground(new java.awt.Color(204, 204, 204));
        jButtonAddExerciseToWorkouts.setForeground(new java.awt.Color(0, 0, 0));
        jButtonAddExerciseToWorkouts.setText("Add Exercise  to  Workouts");
        jButtonAddExerciseToWorkouts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddExerciseToWorkoutsActionPerformed(evt);
            }
        });
        add(jButtonAddExerciseToWorkouts);
        jButtonAddExerciseToWorkouts.setBounds(10, 310, 190, 30);

        jPanelAssignedExercicis.setBackground(new java.awt.Color(255, 255, 153));
        jPanelAssignedExercicis.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Assigned Exercise", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 1, 12), new java.awt.Color(0, 0, 0))); // NOI18N
        jPanelAssignedExercicis.setLayout(null);

        jListExercise.setBackground(new java.awt.Color(255, 255, 153));
        jListExercise.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jListExercise.setForeground(new java.awt.Color(0, 0, 0));
        jListExercise.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Exercise List" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jListExercise);

        jPanelAssignedExercicis.add(jScrollPane2);
        jScrollPane2.setBounds(20, 30, 190, 150);

        add(jPanelAssignedExercicis);
        jPanelAssignedExercicis.setBounds(400, 140, 230, 190);

        jPanelListUsers.setBackground(new java.awt.Color(255, 255, 153));
        jPanelListUsers.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "List Users", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 1, 12), new java.awt.Color(0, 0, 0))); // NOI18N
        jPanelListUsers.setLayout(null);

        jComboBoxListUsers.setBackground(new java.awt.Color(153, 153, 153));
        jComboBoxListUsers.setForeground(new java.awt.Color(0, 0, 0));
        jComboBoxListUsers.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxListUsers.setActionCommand("");
        jComboBoxListUsers.setPreferredSize(new java.awt.Dimension(652, 395));
        jComboBoxListUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxListUsersActionPerformed(evt);
            }
        });
        jPanelListUsers.add(jComboBoxListUsers);
        jComboBoxListUsers.setBounds(10, 20, 160, 30);

        add(jPanelListUsers);
        jPanelListUsers.setBounds(10, 10, 290, 80);

        jPanelWorkoutsTable.setBackground(new java.awt.Color(255, 255, 153));
        jPanelWorkoutsTable.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Workouts Table", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 1, 12), new java.awt.Color(0, 0, 0))); // NOI18N
        jPanelWorkoutsTable.setLayout(null);

        jTableWorkouts.setBackground(new java.awt.Color(153, 153, 153));
        jTableWorkouts.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTableWorkouts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableWorkouts.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableWorkouts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableWorkoutsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableWorkouts);

        jPanelWorkoutsTable.add(jScrollPane1);
        jScrollPane1.setBounds(10, 30, 240, 100);

        add(jPanelWorkoutsTable);
        jPanelWorkoutsTable.setBounds(10, 140, 290, 150);

        jPanelExercicis.setBackground(new java.awt.Color(255, 255, 153));
        jPanelExercicis.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Exercise", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 1, 12), new java.awt.Color(0, 0, 0))); // NOI18N
        jPanelExercicis.setForeground(new java.awt.Color(0, 0, 0));
        jPanelExercicis.setLayout(null);

        jTableExercicis.setBackground(new java.awt.Color(153, 153, 153));
        jTableExercicis.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        jTableExercicis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableExercicisMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTableExercicis);

        jPanelExercicis.add(jScrollPane3);
        jScrollPane3.setBounds(10, 30, 160, 140);

        jButtonShowExercise.setBackground(new java.awt.Color(255, 255, 255));
        jButtonShowExercise.setForeground(new java.awt.Color(0, 0, 0));
        jButtonShowExercise.setText("Show Exercise");
        jButtonShowExercise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonShowExerciseActionPerformed(evt);
            }
        });
        jPanelExercicis.add(jButtonShowExercise);
        jButtonShowExercise.setBounds(170, 30, 110, 20);

        jButtonAgregar.setBackground(new java.awt.Color(255, 255, 255));
        jButtonAgregar.setForeground(new java.awt.Color(0, 0, 0));
        jButtonAgregar.setText("Add New Exercise");
        jButtonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAgregarActionPerformed(evt);
            }
        });
        jPanelExercicis.add(jButtonAgregar);
        jButtonAgregar.setBounds(170, 110, 110, 20);

        jButtonModificar.setBackground(new java.awt.Color(255, 255, 255));
        jButtonModificar.setForeground(new java.awt.Color(0, 0, 0));
        jButtonModificar.setText("Modify");
        jButtonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModificarActionPerformed(evt);
            }
        });
        jPanelExercicis.add(jButtonModificar);
        jButtonModificar.setBounds(170, 70, 110, 20);

        jButtonEliminar.setBackground(new java.awt.Color(255, 255, 255));
        jButtonEliminar.setForeground(new java.awt.Color(0, 0, 0));
        jButtonEliminar.setText("Delete");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });
        jPanelExercicis.add(jButtonEliminar);
        jButtonEliminar.setBounds(170, 150, 110, 20);

        add(jPanelExercicis);
        jPanelExercicis.setBounds(10, 350, 310, 190);
    }// </editor-fold>//GEN-END:initComponents

    private void assignedUsers() {
        int instructorId = instructor.getId();
        ArrayList<Usuaris> usuariosAsignados = da.getAllUsersInstructor(instructorId);
        // Creamos un modelo de ComboBox para mostrar los usuarios
        DefaultComboBoxModel<String> dcbm = new DefaultComboBoxModel<>();
         listUsers = usuariosAsignados;
        // Agregamos los usuarios asignados al combo box
        for (Usuaris usuario : usuariosAsignados) {
            dcbm.addElement(usuario.getNom());
        }
        // Asigna el modelo al ComboBox de usuarios
        jComboBoxListUsers.setModel(dcbm);
        jComboBoxUsersWork.setModel(dcbm);
        // Actualiza las tablas de Workouts y Ejercicios (vacías inicialmente)
        updateTableExercicis(new ArrayList<>());
    }
    
    private void jComboBoxListUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxListUsersActionPerformed

        // Verifica que se ha seleccionado un usuario válido
        String selectedUserName = (String) jComboBoxListUsers.getSelectedItem();

        if (selectedUserName != null && !selectedUserName.isEmpty()) {
            
            // Busca el objeto Usuaris correspondiente al nombre seleccionado
            Usuaris selectedUser = null;
            for (Usuaris usuario : listUsers) {
                if (usuario.getNom().equals(selectedUserName)) {
                    selectedUser = usuario;
                    int userId = selectedUser.getId();
                    updateTableWorkouts(userId);
                    usuarioSeleccionado = selectedUser;
                }
            }
        }
    }//GEN-LAST:event_jComboBoxListUsersActionPerformed

    private void jTableWorkoutsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableWorkoutsMouseClicked
        int selectedRow = jTableWorkouts.getSelectedRow();
        if (selectedRow != -1) {
            try {
                // Obtener el valor de la columna de ID y convertir a Integer
                Object idValue = jTableWorkouts.getValueAt(selectedRow, 0);
                int workoutId = (idValue instanceof Integer) ? (Integer) idValue : Integer.parseInt(idValue.toString());

                List<Exercicis> exercicis = da.getExercicisForWorkout(workoutId);
                listExercicisAssignedWorkouts(exercicis);

                if (exercicis.isEmpty()) {
                    jListExercise.setVisible(false);
                } else {
                    jListExercise.setVisible(true);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Error: Error: The workout select is not a valid.");
            }
        }
    }//GEN-LAST:event_jTableWorkoutsMouseClicked

    private void jButtonAddWorkoutsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddWorkoutsActionPerformed
        // Muestra el diálogo para crear un nuevo w
        jDialogWorkouts.setVisible(true);
        jDialogWorkouts.setLocationRelativeTo(this);
    }//GEN-LAST:event_jButtonAddWorkoutsActionPerformed

    private void jButtonAddWorkoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddWorkoutActionPerformed
        // Verifica si el usuario está seleccionado
        if (usuarioSeleccionado == null || usuarioSeleccionado.getId() == 0) {
            // Si no hay un usuario seleccionado, muestra un mensaje de error
            JOptionPane.showMessageDialog(this, "Please select a valid user", "Error", JOptionPane.ERROR_MESSAGE);
            return;  // Detener la ejecución si no hay usuario seleccionado
        }

        // Obtiene el texto de los comentarios del w
        String comments = jTextComment.getText();
        
        // Obtiene el ID del usuario seleccionado
        int userId = usuarioSeleccionado.getId();
        Date dateWork = (Date) jSpinnerForDate.getValue();
        // Formatea la fecha en formato adecuado para la base de datos
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String fecha = dateFormat.format(dateWork);

        // Crear un nuevo objeto Workouts
        Workouts nuevoWorkout = new Workouts();
        nuevoWorkout.setForDate(fecha);
        nuevoWorkout.setUserId(userId);
        nuevoWorkout.setComments(comments);
        // Aquí puedes guardar el nuevo workout en la base de datos o en memoria
        da.getSaveWorkout(nuevoWorkout);

        // Mostrar un mensaje de éxito
        JOptionPane.showMessageDialog(this, "Workout created successfully.");
        jDialogWorkouts.dispose();
        

    }//GEN-LAST:event_jButtonAddWorkoutActionPerformed

    private void jComboBoxUsersWorkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxUsersWorkActionPerformed
        // Obtén el usuario seleccionado del ComboBox
        String selectedUserName = (String) jComboBoxUsersWork.getSelectedItem();
        // Verifica si el usuario seleccionado es válido
        if (selectedUserName == null || selectedUserName.isEmpty()) {
            // Si no hay un usuario válido, muestra un mensaje
            JOptionPane.showMessageDialog(this, "Please select a valid user.");
            // Busca el objeto Usuaris correspondiente al nombre seleccionado
            Usuaris selectedUser = null;
            for (Usuaris usuario : listUsers) {
                if (usuario.getNom().equals(selectedUserName)) {
                    selectedUser = usuario;
                    break;
                }
            }
            if (selectedUser != null) {
                // Si el usuario es válido, almacena el usuario seleccionado
                usuarioSeleccionado = selectedUser;
            }
        }
    }//GEN-LAST:event_jComboBoxUsersWorkActionPerformed
    
    private void listExercicisAssignedWorkouts(List<Exercicis> listExercicis) {
        //MUESTRA LA LISTA del ejercicio que esta ASIGNADO al workout
        DefaultListModel<String> listModel = new DefaultListModel<>();
        for (Exercicis ex : listExercicis) {
            listModel.addElement(ex.getNomExercici() + " " + ex.getDescripcio());
        }
        jListExercise.setModel(listModel);

    }

    private void inicializarTablaWorkouts() {
        DefaultTableModel dtm = new DefaultTableModel();
        dtm.setColumnIdentifiers(new String[]{"Workout", "ForDate", "Comments"});
        jTableWorkouts.setModel(dtm);
        jListExercise.setVisible(false);

    }

    private void updateTableWorkouts(int userId) {
        DefaultTableModel dtm = (DefaultTableModel) jTableWorkouts.getModel();
        dtm.setRowCount(0);
        
        ArrayList<Workouts> workouts = da.getWorkoutsForUser(userId);
        listWorkouts = workouts;
        for (Workouts workout : workouts) {
            // Asegúrate de agregar el ID como Integer
            dtm.addRow(new Object[]{workout.getId(), workout.getForDate(), workout.getComments()});
        }
    }

    private void inicializarTablaListaExercicis() {
        // Inicializa la tabla de ejercicios con los datos desde la base de datos
        List<Exercicis> listaEjercicios = da.getInfoExercise();
        listExercicisAssignedWorkouts(listaEjercicios);
    }

    private void updateTableExercicis(List<Exercicis> exercici) {
        // Actualiza la tabla de ejercicios con los datos de la lista proporcionada
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new String[]{"ID", "Name Exercise", "Descrition"});

        for (Exercicis exercicis : exercici) {
            model.addRow(new Object[]{Integer.valueOf(exercicis.getId()), exercicis.getNomExercici(), exercicis.getDescripcio()});
        }

        jTableExercicis.setModel(model);
        // Ocultar la columna de ID para que no sea visible al usuario
        jTableExercicis.getColumnModel().getColumn(0).setMinWidth(0);
        jTableExercicis.getColumnModel().getColumn(0).setMaxWidth(0);
    }

    private void jButtonShowExerciseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonShowExerciseActionPerformed
        // Obtener los ejercicios de la base de datos
        List<Exercicis> exercicisList = da.getInfoExercise();
        // Actualizar la tabla con los ejercicios obtenidos
        updateTableExercicis(exercicisList);
    }//GEN-LAST:event_jButtonShowExerciseActionPerformed

    private void jButtonGuardarExercicisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarExercicisActionPerformed
        // Guarda un nuevo ejercicio ingresado por el usuario
        String nombreExercici = jTextNombreExercici.getText();  // El campo para el nombre
        String descripcioExercici = jTextDescripcio.getText();  // El campo para la descripción

        // Verifica que los campos no estén vacíos
        if (nombreExercici.isEmpty() || descripcioExercici.isEmpty()) {
            JOptionPane.showMessageDialog(jDialogExercicis, "Please fill in all fields.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Crear el nuevo ejercicio
        Exercicis nuevoExercici = new Exercicis();
        nuevoExercici.setNomExercici(nombreExercici);
        nuevoExercici.setDescripcio(descripcioExercici);

        // Guardar el ejercicio en la base de datos
        da.getSaveExercici(nuevoExercici);

        // Mostrar mensaje de éxito
        JOptionPane.showMessageDialog(jDialogExercicis, "Exercise added successfully.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

        // Cerrar el diálogo
        jDialogExercicis.dispose();

        // Actualizar la lista de ejercicios
        updateTableExercicis(da.getInfoExercise());
    }//GEN-LAST:event_jButtonGuardarExercicisActionPerformed

    private void jButtonCancelarWorkoutsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarWorkoutsActionPerformed
        jDialogWorkouts.dispose();
    }//GEN-LAST:event_jButtonCancelarWorkoutsActionPerformed

    private void jButtonCancelExerciciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelExerciciActionPerformed
        jDialogExercicis.dispose();
    }//GEN-LAST:event_jButtonCancelExerciciActionPerformed

    private void jButtonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAgregarActionPerformed
        jDialogExercicis.setVisible(true);// TODO add your handling code here:
        jDialogExercicis.setLocationRelativeTo(this);
    }//GEN-LAST:event_jButtonAgregarActionPerformed

    private void jTableExercicisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableExercicisMouseClicked
        int selectedRow = jTableExercicis.getSelectedRow();

        if (selectedRow != -1) {
            try {
                // Leer el ID directamente como un Integer desde la primera columna
                int id = (int) jTableExercicis.getValueAt(selectedRow, 0);  // Columna 0 para ID

                String nombreEjercicio = (String) jTableExercicis.getValueAt(selectedRow, 1);
                String descripcionEjercicio = (String) jTableExercicis.getValueAt(selectedRow, 2);

                // Pre-cargar los valores en el formulario de modificación (sin abrirlo)
                jTextNomExerciciModificar.setText(nombreEjercicio);
                jTextDescripcioModificar.setText(descripcionEjercicio);

                // Guardar el ID en el botón "Modificar" para usarlo luego en inicializarModificacion
                jButtonModificar.setActionCommand(String.valueOf(id));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error: Could not retrieve the exercise ID.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select an exercise to edit.");
        }
    }//GEN-LAST:event_jTableExercicisMouseClicked

    private void jButtonAddModificadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddModificadoActionPerformed
        try {
        // Leer el ID del ejercicio almacenado en el ActionCommand de jButtonModificar
        String actionCommand = jButtonModificar.getActionCommand();
        int id = Integer.parseInt(actionCommand);

        // Obtener los valores nuevos de los campos de texto
        String newName = jTextNomExerciciModificar.getText();
        String newDescripcio = jTextDescripcioModificar.getText();

        // Llamar a getUpdateExercici para actualizar el ejercicio en la base de datos
        da.getUpdateExercici(id, newName, newDescripcio);

        // Actualizar la tabla y cerrar el cuadro de diálogo
        updateTableExercicis(da.getInfoExercise());
        jDialogModificar.dispose();
        JOptionPane.showMessageDialog(this, "Exercise successfully modified.");
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Error: No valid exercise selected.");
    }
    }//GEN-LAST:event_jButtonAddModificadoActionPerformed
  
    private void jButtonCancelModificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelModificacionActionPerformed
        jDialogModificar.dispose();
    }//GEN-LAST:event_jButtonCancelModificacionActionPerformed

    private void jButtonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModificarActionPerformed
        String actionCommand = jButtonModificar.getActionCommand();
        if (actionCommand != null && !actionCommand.isEmpty()) {
            // Abrir el diálogo de modificación solo si se seleccionó un ejercicio válido
            jDialogModificar.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Please select an exercise before attempting to modify.");
        }
        jDialogModificar.setLocationRelativeTo(this);
    }//GEN-LAST:event_jButtonModificarActionPerformed

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        int selectedRow = jTableExercicis.getSelectedRow();
        if (selectedRow != -1) {
            try {
                // Obtener el ID del ejercicio (por ejemplo, en la primera columna)
                int id = (int) jTableExercicis.getValueAt(selectedRow, 0);

                // Confirmar la eliminación
                int confirm = JOptionPane.showConfirmDialog(this,
                        "¿Are you sure you want to delete this exercise?",
                        "Confirm deletion",
                        JOptionPane.YES_NO_OPTION);

                if (confirm == JOptionPane.YES_OPTION) {
                    // Llamar al método para eliminar el ejercicio
                    da.getDeleteEjercicio(id);

                    // Actualizar la tabla después de eliminar
                    updateTableExercicis(da.getInfoExercise());

                    // Mensaje de éxito
                    JOptionPane.showMessageDialog(this, "Exercise deleted successfully.");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error while trying to delete the exercise.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select an exercise to delete.");
        }
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void jButtonAddExerciseToWorkoutsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddExerciseToWorkoutsActionPerformed
        // Obtener el w seleccionado
        int selectedRow = jTableWorkouts.getSelectedRow();
        if (selectedRow != -1) {
            // Obtener el ID del w (suponemos que el ID está en la primera columna)
            int workoutId = (int) jTableWorkouts.getValueAt(selectedRow, 0);  // O el índice correcto para el ID

            // Obtener los ejercicios seleccionados
            int[] selectedRowsExercicis = jTableExercicis.getSelectedRows();  // Obtener filas seleccionadas en la tabla de ejercicios
            ArrayList<Exercicis> selectedExercicis = new ArrayList<>();

            for (int rowIndex : selectedRowsExercicis) {
                // Obtener el valor de la celda de ID en la columna oculta (suponiendo que el ID está en la columna 0)
                Object exerciciIdValue = jTableExercicis.getValueAt(rowIndex, 0);  // ID de la columna oculta

                int exerciciId;
                if (exerciciIdValue instanceof Integer) {
                    exerciciId = (Integer) exerciciIdValue;  // Si es Integer, lo usamos directamente
                } else {
                    throw new IllegalArgumentException(".");
                }

                // Crear un objeto Exercicis con el ID obtenido
                Exercicis exercici = new Exercicis();
                exercici.setId(exerciciId);  // Asignamos el ID
                selectedExercicis.add(exercici);
            }

            // Para cada ejercicio seleccionado, crear la relación en la base de datos
            for (Exercicis exercici : selectedExercicis) {
                ExercicisWorKouts workoutExercici = new ExercicisWorKouts();
                workoutExercici.setIdWorkouts(workoutId);
                workoutExercici.setIdExercici(exercici.getId());

                // Guardar la relación en la base de datos
                da.insertarRelaciones(workoutExercici);
            }

            // Mostrar mensaje de éxito
            JOptionPane.showMessageDialog(this, "Exercise(s) added to the workout successfully");

            // Actualizar la tabla de workouts para reflejar los cambios
            //updateTableWorkouts();  // Asumiendo que tienes esta lista de workouts

            // Actualizar la lista de ejercicios asignados al w
            List<Exercicis> exercicis = da.getExercicisForWorkout(workoutId);
            listExercicisAssignedWorkouts(exercicis);  // Asegúrate de que este método actualiza correctamente la UI
        } else {
            JOptionPane.showMessageDialog(this, "Please select a workout.");
        }
    }//GEN-LAST:event_jButtonAddExerciseToWorkoutsActionPerformed

    private void jTextNomExerciciModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextNomExerciciModificarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextNomExerciciModificarActionPerformed

    private void jTextDescripcioModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextDescripcioModificarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextDescripcioModificarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddExerciseToWorkouts;
    private javax.swing.JButton jButtonAddModificado;
    private javax.swing.JButton jButtonAddWorkout;
    private javax.swing.JButton jButtonAddWorkouts;
    private javax.swing.JButton jButtonAgregar;
    private javax.swing.JButton jButtonCancelExercici;
    private javax.swing.JButton jButtonCancelModificacion;
    private javax.swing.JButton jButtonCancelarWorkouts;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonGuardarExercicis;
    private javax.swing.JButton jButtonModificar;
    private javax.swing.JButton jButtonShowExercise;
    private javax.swing.JComboBox<String> jComboBoxListUsers;
    private javax.swing.JComboBox<String> jComboBoxUsersWork;
    private javax.swing.JLabel jDescripcioExercicis;
    private javax.swing.JLabel jDescripcioExercicisModificar;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JDesktopPane jDesktopVisualExercicis;
    private javax.swing.JDesktopPane jDesktopVisualWorkout;
    private javax.swing.JDialog jDialogExercicis;
    private javax.swing.JDialog jDialogModificar;
    private javax.swing.JDialog jDialogWorkouts;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelDate;
    private javax.swing.JList<String> jListExercise;
    private javax.swing.JLabel jListUsers;
    private javax.swing.JLabel jLogo;
    private javax.swing.JLabel jNomExerciciModificar;
    private javax.swing.JLabel jNombreExercicis;
    private javax.swing.JPanel jPanelAssignedExercicis;
    private javax.swing.JPanel jPanelExercicis;
    private javax.swing.JPanel jPanelListUsers;
    private javax.swing.JPanel jPanelWorkoutsTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jSpinnerForDate;
    private javax.swing.JTable jTableExercicis;
    private javax.swing.JTable jTableWorkouts;
    private javax.swing.JTextField jTextComment;
    private javax.swing.JTextField jTextDescripcio;
    private javax.swing.JTextField jTextDescripcioModificar;
    private javax.swing.JTextField jTextNomExerciciModificar;
    private javax.swing.JTextField jTextNombreExercici;
    // End of variables declaration//GEN-END:variables
}
